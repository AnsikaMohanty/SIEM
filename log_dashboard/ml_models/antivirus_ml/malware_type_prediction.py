import pandas as pd
import mysql.connector
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
import os

OUTPUT_FOLDER = "static/antivirus_outputs"
os.makedirs(OUTPUT_FOLDER, exist_ok=True)

def fetch_data():
    conn = mysql.connector.connect(
        host="localhost",
        user="root",
        password="rootroot",
        database="siem"
    )
    query = "SELECT file_path, timestamp, malware_type, severity, scan_type, os, detection_method FROM antivirus_logs"
    df = pd.read_sql(query, conn)
    conn.close()
    return df

def run_malware_type_prediction():
    df = fetch_data()
    df_clean = df.drop(columns=["file_path", "timestamp"])
    
    categorical_cols = df_clean.select_dtypes(include=["object"]).columns.tolist()
    numerical_cols = df_clean.select_dtypes(include=["int64","float64"]).columns.tolist()
    
    encoder = OneHotEncoder(handle_unknown="ignore")
    encoded = encoder.fit_transform(df_clean[categorical_cols])
    encoded_df = pd.DataFrame(encoded.toarray(), columns=encoder.get_feature_names_out(categorical_cols))
    
    df_encoded = pd.concat([encoded_df, df_clean[numerical_cols].reset_index(drop=True)], axis=1)
    
    # Features & target
    X = df_encoded.drop(columns=[col for col in df_encoded.columns if col.startswith("malware_type_")])
    y = df["malware_type"]
    
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    rf_model = RandomForestClassifier(random_state=42)
    rf_model.fit(X_train, y_train)
    y_pred = rf_model.predict(X_test)
    
    # Plot malware type distribution
    plt.figure(figsize=(8,4))
    sns.countplot(x="malware_type", data=df)
    plt.title("Malware Type Distribution")
    malware_plot = "malware_type_distribution.png"
    plt.savefig(os.path.join(OUTPUT_FOLDER, malware_plot))
    plt.close()
    
    metrics = classification_report(y_test, y_pred, output_dict=True)
    
    return {
        "metrics": metrics,
        "sample": df.head(5).to_dict(orient="records"),
        "images": [malware_plot]
    }
